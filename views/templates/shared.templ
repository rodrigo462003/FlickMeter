package templates

type htmx struct {
	hxPath      string
	hxParams    string
	hxTarget    string
	hxTargetErr string
	hxSwap      string
	post        bool
}

func newHtmx(hxPath, hxParams, hxTarget, hxTargetErr, hxSwap string, post bool) htmx {
	return htmx{hxPath, hxParams, hxTarget, hxTargetErr, hxSwap, post}
}

templ button(id string, type_, text string, hx htmx) {
	<button
		id={ id }
		type={ type_ }
		if hx.post {
			hx-post={ hx.hxPath }
		} else {
			hx-get={ hx.hxPath }
		}
		hx-target={ hx.hxTarget }
		hx-swap={ hx.hxSwap }
		class="whitespace-nowrap transition-transform active:scale-90 hover:bg-indigo-800 focus:outline-none focus:shadow-none focus:outline-indigo-700 py-2 px-4 rounded-full text-white text-xl font-extrabold shadow-md shadow-black bg-indigo-700"
	>
		{ text }
	</button>
}

templ buttonModal(id string, type_, text string, hx htmx) {
	<button
		id={ id }
		type={ type_ }
		if hx.post {
			hx-post={ hx.hxPath }
		} else {
			hx-get={ hx.hxPath }
		}
		hx-target={ hx.hxTarget }
		hx-swap={ hx.hxSwap }
		class="whitespace-nowrap transition-transform active:scale-90 hover:bg-indigo-800 focus:outline-none focus:shadow-none focus:outline-indigo-700 py-2 px-4 rounded-full text-white text-xl font-extrabold shadow-md shadow-black bg-indigo-700"
	>
		{ text }
	</button>
}

templ anchorButton(type_, text string, hx htmx) {
	<button
		type={ type_ }
		if hx.post {
			hx-post={ hx.hxPath }
		} else {
			hx-get={ hx.hxPath }
		}
		hx-target={ hx.hxTarget }
		hx-swap={ hx.hxSwap }
		class="transition-transform active:scale-90 focus:outline-none hover:bg-gray-100 focus:shadow-none focus:outline-indigo-700 py-2 px-4 rounded-full text-indigo-700"
	>
		{ text }
	</button>
}

templ formTitleContainer() {
	<div class="uppercase font-extrabold text-3xl text-wrap text-center flex-1 sm:flex-0 sm:w-5/12 text-indigo-700">
		{ children... }
	</div>
}

templ formContainer() {
	<div class="p-8 flex flex-col sm:flex-row items-center justify-center space-y-10 sm:space-y-0 sm:space-x-10">
		{ children... }
	</div>
}

templ form() {
	<form hx-ext="response-targets" id="form" class="w-full flex flex-col sm:w-2/3 text-indigo-700 space-y-4">
		{ children... }
	</form>
}

templ inputValid(labelTxt, type_, id, placeholder, autocomplete string, required bool, hx htmx) {
	<div class="relative">
		<label
			for={ id }
			class="select-none absolute px-0.5 left-2 transform -translate-y-2.5 block bg-white text-sm font-medium"
		>
			{ labelTxt }
		</label>
		<input
			hx-target={ hx.hxTarget }
			hx-target-422={ hx.hxTargetErr }
			hx-target-409={ hx.hxTargetErr }
			hx-post={ hx.hxPath }
			hx-swap={ hx.hxSwap }
			if hx.post {
				hx-post={ hx.hxPath }
			} else {
				hx-get={ hx.hxPath }
			}
			hx-params={ hx.hxParams }
			type={ type_ }
			id={ id }
			name={ id }
			autocomplete={ autocomplete }
			class="text-gray-950 text-sm border border-indigo-700 rounded-md focus:outline-offset-0 focus:outline-none focus:outline-indigo-700 block w-full p-2"
			placeholder={ placeholder }
			if required {
				required
			}
		/>
		<div class="ml-1 mt-1 text-red-700 text-xs w-full" id={ id + "Err" }></div>
	</div>
}

templ input(labelTxt, type_, id, placeholder, autocomplete string, required bool) {
	<div class="relative">
		<label
			for={ id }
			class="select-none px-1 absolute left-2 transform -translate-y-2.5 block bg-white text-sm font-medium"
		>
			{ labelTxt }
		</label>
		<input
			type={ type_ }
			id={ id }
			name={ id }
			autocomplete={ autocomplete }
			class="text-gray-950 text-sm border border-indigo-700 rounded-md focus:outline-offset-0 focus:outline-none focus:outline-indigo-700 block w-full p-2"
			placeholder={ placeholder }
			if required {
				required
			}
		/>
	</div>
}

templ checkbox(id, labelTxt string) {
	<div class="flex items-start">
		<input
			id={ id }
			type="checkbox"
			name={ id }
			value=""
			class="peer h-4 w-4 cursor-pointer focus:outline-none focus:outline-offset-1 focus:outline-indigo-700 appearance-none rounded border border-indigo-700 checked:bg-indigo-700 "
		/>
		<label for={ id } class=" relative bottom-[2px] whitespace-nowrap select-none ms-2 text-sm font-medium">
			{ labelTxt }
		</label>
		<span
			aria-hidden="true"
			class="absolute transition-all text-white opacity-0 peer-checked:opacity-100 transform translate-y-[1px] translate-x-[1px] pointer-events-none"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-3.5 w-3.5"
				viewBox="0 0 20 20"
				fill="currentColor"
				stroke="currentColor"
				stroke-width="1"
			>
				<path
					fill-rule="evenodd"
					d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
					clip-rule="evenodd"
				></path>
			</svg>
		</span>
	</div>
}
