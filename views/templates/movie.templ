package templates

import (
"fmt"
"github.com/rodrigo462003/FlickMeter/model"
"strconv"
"strings"
)

templ search() {
<div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-md">
    <div class="relative w-full">
        <input class="form-control w-full" type="search" name="search" placeholder="Begin Typing To Search Users..."
            hx-post="/movie/search" hx-trigger="input changed delay:1s, keyup[key=='Enter']"
            hx-target="#search-results" />
        <div class="absolute w-full bg-white border border-gray-300 shadow-md mt-1 rounded-md z-10" id="search-results">
        </div>
    </div>
</div>

}

templ Results(movies []model.Movie) {
for _, movie := range movies {
<a href={ templ.SafeURL(fmt.Sprintf("/movie/%d", movie.ID)) } type="button" class="flex">
    <img width="50" src={ "https://image.tmdb.org/t/p/original/" + movie.PosterPath } alt={ movie.Title + "poster" } />
    <h>
        { movie.OriginalTitle }
    </h>
</a>
}
}

templ Movie(movie model.Movie, isAuth bool) {
@Base()
<body class="min-h-screen" style={ fmt.Sprintf("backdrop-filter:grayscale(0.9) blur(40px) brightness(0.9);background-size: cover;background-image: url(https://image.tmdb.org/t/p/original/%s);background-attachment: fixed;", movie.BackdropPath) }>
    @navbar(isAuth)
    <div class="flex flex-col pt-16 px-52" id="content">
        <h1 class="text-indigo-700 font-extrabold font-sans text-7xl">
            { movie.Title }
        </h1>
        <div class="flex gap-20">
            <p>{ strings.Split(movie.ReleaseDate, "-")[0] }</p>
            <p>{ strconv.Itoa(movie.Runtime) + "m" }</p>
            for i, genre := range movie.Genres {
            if i == 0 {
            { genre.Name }
            } else {
            { " / " + genre.Name }
            }
            }
        </div>
        <div class="flex gap-1 h-[450px] ">
            <img class="h-full rounded-lg w-auto object-cover" id="poster" src={ fmt.Sprintf("https://image.tmdb.org/t/p/original/%s", movie.PosterPath) } alt="movie poster" />
            @Frame(movie.Videos)
        </div>
        <div class="flex p-4 flex-col gap-4">
            @Ratings(movie.VoteAverage)
            <p class="overview">
                { movie.Overview }
            </p>
        </div>
    </div>
</body>
}

templ Ratings(rating float64) {
<div class="flex gap-2">
    <div>
        {fmt.Sprintf("%.1f",rating)} / 10
    </div>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30" height="30">
        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" fill="gold">
        </path>
    </svg>
</div>
}

templ Frame(videos []model.Video) {
    if len(videos) > 0 {
    <iframe src={fmt.Sprintf("https://www.youtube.com/embed/%s?autoplay=1&mute=1", videos[len(videos)-1].Key)}
    class="h-full w-full rounded-lg" id="videoIframe" title="YouTube video player" frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
    }
}
