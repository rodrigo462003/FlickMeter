package templates

import (
"fmt"
"github.com/rodrigo462003/FlickMeter/model"
"strconv"
"strings"
)

templ Movie(movie model.Movie, isAuth bool, userReview *model.Review) {
@Base()
<body class="relative overflow-auto flex-col min-h-screen" style={ fmt.Sprintf("background-size: cover;background-image: url(https://image.tmdb.org/t/p/original/%s);background-attachment: fixed;", movie.BackdropPath) }>
    <div class="h-full absolute inset-0 bg-gray-800 bg-opacity-80 backdrop-saturate-200 backdrop-blur-lg -z-10"></div>
    @navbar(isAuth)
    <div class="text-white w-max-full flex flex-col pt-4 px-[10%]" id="content">
        <div class="items-center flex py-2 gap-1">
            <h1 class="font-bold font-sans text-3xl">
                { movie.Title }
            </h1>
            <div class="ml-auto">
                @ratings(movie.VoteAverage)
            </div>
        </div>
        <div class="text-gray-300 flex-wrap pb-3 flex gap-2">
            <p>{ strings.Split(movie.ReleaseDate, "-")[0] }</p>
            <p>•</p>
            <p>{ strconv.Itoa(movie.Runtime) + "m" }</p>
            <p>•</p>
            for i, genre := range movie.Genres {
            if i == 0 {
            { genre.Name }
            } else {
            { " / " + genre.Name }
            }
            }
        </div>
        <div class="flex gap-1 h-[35vw]">
            <img class="h-full rounded-lg w-auto object-cover" id="poster" src={
                fmt.Sprintf("https://image.tmdb.org/t/p/original/%s", movie.PosterPath) } alt="movie poster" />
            <div class="w-full">
            @frame(movie.Trailer())
            </div>
        </div>
        <p class="text-justify py-3">
            { movie.Overview }
        </p>
        <hr />
        <div class="flex py-3 items-center">
            <h1 class="text-xl font-bold">Reviews</h1>
            if isAuth{
            <button hx-params="*" hx-swap="innerHTML" hx-target="#newReviewForm" hx-get="review"
                onclick="toggleNewReview()"
                hx-trigger="click[isEmpty()]"
                class="flex ml-auto whitespace-nowrap transition-transform active:scale-90 hover:bg-indigo-800 focus:outline-none focus:shadow-none focus:outline-indigo-700 py-2 px-3 rounded-full text-white font-bold shadow-gray-900 shadow-lg bg-indigo-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 mr-2" fill="none" stroke="currentColor"
                    viewBox="0 0 24 24" stroke-width="2">
                    <path d="M16 3l5 5-10 10H6v-5L16 3z"></path>
                </svg>
                Review
            </button>
            }
        </div>
        <form class="h-0 overflow-y-hidden duration-500 transition-all" id="newReviewForm"
        hx-on::after-settle="resetStars();">
        </form>
        <script>
            const reviewForm = document.getElementById('newReviewForm')
            let empty = true

            function toggleNewReview() {
                empty = !empty
                if (empty) {
                    reviewForm.classList.toggle('h-[340px]')
                    reviewForm.classList.toggle('h-0')
                    return
                }
                reviewForm.classList.toggle('h-[340px]')
                reviewForm.classList.toggle('h-0')
                return

            }
            function isEmpty() {
                return !empty
            }
        </script>
        <hr />
        <div class="empty:hidden" id="userReview">
        if userReview != nil{
            @Review(userReview)
        }
        </div>
        <div id="reviews">
            for _, review := range movie.Reviews {
                @Review(&review)
            }
        </div>
        <div class="py-3">
            <h1 class="text-xl font-bold"> Related Movies</h1>
            @movieList(movie.Related)
        </div>
    </div>
</body>
}

templ frame(trailer *model.Video) {
if trailer != nil {
<iframe src={ fmt.Sprintf("https://www.youtube.com/embed/%s?autoplay=1&mute=1", trailer.Key) }
    class="w-full h-full rounded-lg" id="videoIframe" title="YouTube video player"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
}
}

templ title(title string) {
<div class="mx-0.5 text-indigo-700 relative">
    <input id="title" name="title" value={ title }
        class="focus:placeholder-transparent peer placeholder:font-bold placeholder:text-indigo-700 text-gray-800 text-base font-normal border border-indigo-700 rounded-lg focus:outline-offset-0 focus:outline-none focus:outline-indigo-700 block w-full p-2"
        placeholder="Title" required />
    @messageDiv("title", "")
</div>
}

templ reviewInput(text string) {
<div class="mx-0.5 text-indigo-700 relative">
    <textarea id="text" name="text" rows="6"
        class="resize-none focus:placeholder-transparent placeholder:font-bold placeholder:text-indigo-700 text-gray-800 text-base font-normal border border-indigo-700 rounded-lg focus:outline-offset-0 focus:outline-none focus:outline-indigo-700 block w-full p-2"
        placeholder="Review" required>{ text } </textarea>
    @messageDiv("review", "")
</div>
}

templ NewForm(review *model.Review) {
<div class="flex flex-col gap-2">
    <hr />
    @title(review.Title)
    @reviewInput(review.Text)
    @stars(review.Rating)
    <button id="submit" type="submit"
        hx-post="review"
        hx-target="#userReview"
        hx-target-201="#userReview"
        class="mx-1 whitespace-nowrap transition-transform active:scale-95 hover:bg-indigo-800 focus:outline-none focus:shadow-none focus:outline-indigo-700 py-2 px-4 rounded-full text-white text-xl font-extrabold shadow-gray-900 shadow-lg bg-indigo-700"
        hx-on::after-request="if (event.detail.xhr.status == 201) toggleNewReview()">Submit</button>
</div>
}

templ Review(review *model.Review) {
    <div class="py-3">
        <div class="font-bold text-lg flex w-full">
            <div class="break-words">{ review.Title }</div>
            <div class="ml-auto">{ review.User.Username }</div>
            <p class="mx-2">•</p>
            <div class="">
                @rating(review.Rating)
            </div>
        </div>
        <p class="whitespace-pre-wrap text-justify">{ review.Text }</p>
    </div>
    <hr />
}

templ rating(rating uint) {
<div class="flex gap items-center gap-1">
    <span class="font-bold">
        { fmt.Sprint(rating) }
    </span>
    @star()
</div>
}

templ star() {
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20">
    <path
        d="M12 16.8l5 3c.7.4 1.4-.2 1.2-.9l-1.3-5.6 4.3-3.7c.6-.5.3-1.4-.4-1.5l-5.6-.4-2.3-5.2c-.3-.7-1.2-.7-1.5 0l-2.3 5.2-5.6.4c-.8.1-1 .9-.4 1.5l4.3 3.7-1.3 5.6c-.2.7.5 1.3 1.2.9z"
        fill="gold" stroke="gold" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"></path>
</svg>
}

templ emptyStar(i int) {
    <button class="rounded-md focus:outline-indigo-700 outline-offset-0 outline-none" type="button" onclick={templ.JSFuncCall("newBase", i) }>
    <svg class="buttonStar cursor-pointer" onmouseover={ templ.JSFuncCall("starsHover", i) }  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30" height="30">
        <path
            d="M12 16.8l5 3c.7.4 1.4-.2 1.2-.9l-1.3-5.6 4.3-3.7c.6-.5.3-1.4-.4-1.5l-5.6-.4-2.3-5.2c-.3-.7-1.2-.7-1.5 0l-2.3 5.2-5.6.4c-.8.1-1 .9-.4 1.5l4.3 3.7-1.3 5.6c-.2.7.5 1.3 1.2.9z"
            fill-opacity="0" fill="gold" stroke="gold" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
</button>
}

templ stars(rating uint) {
<div class="w-fit flex pl-1 gap-2" onmouseleave="resetStars()">
    for i := range 10 {
    @emptyStar(i)
    }
</div>
<input name="rating" id="starInput" class="hidden" />
@templ.Raw(fmt.Sprintf("<script>var base = %d</script>", rating))
<script>
    function starsHover(i) {
        const stars = document.getElementsByClassName("buttonStar");
        const starInput = document.getElementById("starInput");
        let j = 0
        for (; j < i + 1; j++) {
            stars[j].firstChild.setAttribute("fill-opacity", "1");
        }
        for (; j < 10; j++) {
            stars[j].firstChild.setAttribute("fill-opacity", "0");
        }
    }

    function newBase(i) {
        base = i + 1;
        resetStars();
    }

    function resetStars() {
        const stars = document.getElementsByClassName("buttonStar");
        const starInput = document.getElementById("starInput");
        let j = 0
        starInput.value = base
        for (; j < base; j++) {
            stars[j].firstChild.setAttribute("fill-opacity", "1");
        }
        for (; j < 10; j++) {
            stars[j].firstChild.setAttribute("fill-opacity", "0");
        }
    }
</script>
}

templ ratings(rating float64) {
<div class="flex gap-1 items-center">
    <div class="flex items-center">
        <span class="font-bold text-xl mr-1">
            { fmt.Sprintf("%.1f",rating) }
        </span>
    </div>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="26" height="26">
        <path
            d="M12 16.8l5 3c.7.4 1.4-.2 1.2-.9l-1.3-5.6 4.3-3.7c.6-.5.3-1.4-.4-1.5l-5.6-.4-2.3-5.2c-.3-.7-1.2-.7-1.5 0l-2.3 5.2-5.6.4c-.8.1-1 .9-.4 1.5l4.3 3.7-1.3 5.6c-.2.7.5 1.3 1.2.9z"
            fill="gold" stroke="gold" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
</div>
}
